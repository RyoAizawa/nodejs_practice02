<!DOCTYPE html>
<html lang="ja">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>顧客情報管理システム</title>
        <meta name="description" content="node.js課題">
        <link type="text/css" rel="stylesheet" href="./css/style.css">
    </head>
    <body>
        <div class="searchForm">
            <input type="text" name="search">
            <button id="searchBtn">名前検索</button>
        </div>
        <table class="clientList">
            <thead>
                <th>id</th>
                <th>名前</th>
                <th>フリガナ</th>
                <th>性別</th>
                <th>メールアドレス</th>
                <th>電話番号</th>
                <th>住所</th>
                <th>都道府県</th>
                <th>世帯数</th>
                <th>更新</th>
                <th>削除</th>
                <th>選択</th>
            </thead>
            <tbody id="clientList">
            </tbody>
        </table>

        <p><a href="/create">ユーザーの追加</a></p>

        <strong>選択した情報一覧</strong>
        <table class="clientList">
            <thead>
                <th>id</th>
                <th>名前</th>
                <th>フリガナ</th>
                <th>性別</th>
                <th>メールアドレス</th>
                <th>電話番号</th>
                <th>住所</th>
                <th>都道府県</th>
                <th>世帯数</th>
                <th>更新</th>
                <th>削除</th>
                <th>選択</th>
            </thead>
            <tbody id="selectedList">
            </tbody>
        </table>

        <div class="totalArea">
            <div class="total">
                <p>性別統計<button id="genderTotalBtn">集計</button></p>
                <ul id="genderTotalList"></ul>
            </div>
            <div class="total">
                <p>都道府県人数統計<button id="workplaceTotalBtn">集計</button></p>
                <ul id="workplaceTotalList"></ul>
            </div>
            <div class="total">
                <p>世帯数統計<button id="householdTotalBtn">集計</button></p>
                <ul id="householdTotalList"></ul>
            </div>
        </div>

        <script>
            // ページ読み込み時は初期値を出力
            window.onload = () => {
                createTableData(personasOrg, clientList);
            };

            /*
            リストに出力するデータを作成するメソッド
                personasObj...作成するユーザーのオブジェクト群
                clientList ...ユーザーを表示するリスト
                selected   ...「選択」を押した場合（選択ボタンがdisabledになる）
            */
            function createTableData(personasObj, clientList, selected = false) {
                // リストは都度初期化
                while(clientList.firstChild) {
                    clientList.firstChild.remove()
                }
                // 渡されたオブジェクトの分だけリストデータの作成
                personasObj.map((person) => {
                    // テーブルデータの要素作成
                    const tableRow          = document.createElement("tr")
                    const clientId          = document.createElement("td")
                    const clientName        = document.createElement("td")
                    const clientKanaName    = document.createElement("td")
                    const clientGender      = document.createElement("td")
                    const clientMail        = document.createElement("td")
                    const clientPhone       = document.createElement("td")
                    const clientAddress     = document.createElement("td")
                    const clientWorkPlace   = document.createElement("td")
                    const clientHouseHold   = document.createElement("td")
                    // 更新ボタンの要素作成
                    const updateBtnTd       = document.createElement("td")
                    const updateBtnLink     = document.createElement("a")
                    const updateBtn         = document.createElement("button")
                    // 削除ボタンの要素作成
                    const deleteBtnTd       = document.createElement("td")
                    const deleteBtnLink     = document.createElement("a")
                    const deleteBtn         = document.createElement("button")
                    // 選択ボタンの要素作成
                    const selectBtnTd       = document.createElement("td")
                    // const selectBtnLink     = document.createElement("a")
                    const selectBtn         = document.createElement("button")
                    // ユーザーデータから値を入れる
                    clientId.innerHTML          = person["id"]
                    clientName.innerHTML        = person["name"]
                    clientKanaName.innerHTML    = person["kana_name"]
                    clientGender.innerHTML      = person["gender"]
                    clientMail.innerHTML        = person["email"]
                    clientPhone.innerHTML       = person["phone"]
                    clientAddress.innerHTML     = person["address"]
                    clientWorkPlace.innerHTML   = person["workplace"]
                    clientHouseHold.innerHTML   = person["household"]
                    updateBtn.innerHTML         = "更新"
                    deleteBtn.innerHTML         = "削除"
                    selectBtn.innerHTML         = "選択"
                    // 更新ボタンの作成
                    updateBtnLink.setAttribute("href", `/edit/${clientId.innerHTML}`)
                    updateBtnLink.appendChild(updateBtn)
                    updateBtnTd.appendChild(updateBtnLink)
                    // 削除ボタンの作成
                    deleteBtnLink.setAttribute("href", `/delete/${clientId.innerHTML}`)
                    deleteBtnLink.appendChild(deleteBtn)
                    deleteBtnTd.appendChild(deleteBtnLink)
                    // 選択ボタンの作成
                    if(selected) selectBtn.setAttribute("disabled", true)
                    selectBtnTd.appendChild(selectBtn)

                    // テーブルの列へデータの追加
                    tableRow.appendChild(clientId);
                    tableRow.appendChild(clientName);
                    tableRow.appendChild(clientKanaName);
                    tableRow.appendChild(clientGender);
                    tableRow.appendChild(clientMail);
                    tableRow.appendChild(clientPhone);
                    tableRow.appendChild(clientAddress);
                    tableRow.appendChild(clientWorkPlace);
                    tableRow.appendChild(clientHouseHold);
                    tableRow.appendChild(updateBtnTd);
                    tableRow.appendChild(deleteBtnTd);
                    tableRow.appendChild(selectBtnTd);

                    // テーブルへ列の追加
                    clientList.appendChild(tableRow);

                    // 検索ボタンを押した際の処理
                    selectBtn.addEventListener("click", () => {
                        // 選択済み配列に要素を追加
                        selectedPersonas.push(person);
                        // 選択した要素を配列から削除
                        personasObj.splice(personasObj.indexOf(person), 1);

                        // 選択した要素を抜いたリストの再作成
                        createTableData(personasObj, clientList);
                        // 選択した情報一覧のリストを再作成
                        createTableData(selectedPersonas, selectedList, true);
                    });
                });
            }

            // 検索ボタンを押した際の処理
            document.querySelector("#searchBtn").addEventListener("click", () => {
                const searchValue = document.querySelector("input[type='text'][name='search']");
                const searchedPersonas = [];
                personasOrg.map((person, index) => {
                    // 部分一致しているか判定
                    if(person["name"].indexOf(searchValue.value) > -1) {
                        // 検索で一致したものを格納する配列に要素を追加
                        searchedPersonas.push(person);
                    }
                });
                // 選択済みの人たちは検索結果からは削除する
                searchedPersonas.forEach((person) => {
                    // 選択した要素を配列から削除
                    selectedPersonas.splice(selectedPersonas.indexOf(person), 1);
                });
                // 一致した要素でリストを再作成
                createTableData(searchedPersonas, clientList);
                // 入力欄の初期化
                searchValue.value = "";
            });

            // 各統計用のボタンを押した際の処理
            function totalCount() {
                const listId = `#${this.select}TotalList`
                const totalList = document.querySelector(listId)
                console.log(totalList)
                // リストは都度初期化
                while(totalList.firstChild) {
                    totalList.firstChild.remove()
                }
                // ユニークな値を取り出す
                let uniqueArray = new Set()
                personasOrg.map((person, index) => {
                    uniqueArray.add(person[this.select]);
                })
                const resultObj = {};
                // 取り出した値をオブジェクトのキー名に設定
                uniqueArray.forEach((elem, index) => {
                    resultObj[elem] = ""
                })
                // 取り出した値と一致する項目の集計
                Object.keys(resultObj).forEach((key, index) => {
                    let count = 0
                    personasOrg.map((person, index)=> {
                        // キーと取り出した値が一致したらカウント
                        if(String(person[this.select]) === key) resultObj[key] = ++count
                    })
                    // 結果の出力
                    totalList.insertAdjacentHTML("beforeend", `<li>${key}${this.sub}：${resultObj[key]}人</li>`)
                })
            }
            // オリジナルのユーザー情報の取得
            const personasOrg = JSON.parse('<%= JSON.stringify(personas) %>'.replace(/&#34;/g, '"'));
            // 選択済みユーザー一覧用の配列
            const selectedPersonas = [];
            // ユーザーテーブル領域
            const clientList = document.querySelector("#clientList");
            // 選択済みユーザーテーブル領域
            const selectedList = document.querySelector("#selectedList");

            // 各集計ボタン
            document.querySelector("#genderTotalBtn").addEventListener("click", {select: "gender", sub: "", handleEvent: totalCount})
            document.querySelector("#workplaceTotalBtn").addEventListener("click", {select: "workplace", sub: "", handleEvent: totalCount})
            document.querySelector("#householdTotalBtn").addEventListener("click", {select: "household", sub: "人世帯", handleEvent: totalCount})

        </script>
        <script>
        </script>
    </body>
</html>
